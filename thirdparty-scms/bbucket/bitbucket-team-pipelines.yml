image: atlassian/pipelines-awscli:latest
pipelines:
  default:
    - parallel:
      - step:
          name: Mirror to AWS
          script:
            - export AWS_ACCESS_KEY_ID=$LJHDATALAKE_AWS_ACCESS_KEY_ID
            - export AWS_SECRET_ACCESS_KEY=$LJHDATALAKE_AWS_SECRET_ACCESS_KEY
            - export AWS_SESSION_TOKEN=$LJHDATALAKE_AWS_SESSION_TOKEN
            - export AWS_DEFAULT_REGION=$LJHDATALAKE_AWS_REGION
            - |
              if [ ${#LJHDATALAKE_AWS_ROLE_TO_ASSUME_NAME} -gt 0 ]; then
                echo Assuming role: $LJHDATALAKE_AWS_ROLE_TO_ASSUME_NAME
                aws sts assume-role --role-arn $LJHDATALAKE_AWS_ROLE_TO_ASSUME_ARN  --role-session-name $LJHDATALAKE_AWS_ROLE_TO_ASSUME_NAME > tmp.json
                export AWS_ACCESS_KEY_ID=$(jq -r .Credentials.AccessKeyId tmp.json)
                export AWS_SECRET_ACCESS_KEY=$(jq -r .Credentials.SecretAccessKey tmp.json)
                export AWS_SESSION_TOKEN=$(jq -r .Credentials.SessionToken tmp.json)              
                rm tmp.json
              fi
            - |
              git config --global credential.helper '!aws codecommit credential-helper $@'
              git config --global credential.UseHttpPath true
              git push https://git-codecommit.${LJHDATALAKE_AWS_REGION}.amazonaws.com/v1/repos/$REMOTE_REPO --all
      - step:
          name: Team Validation
          script:
            - |
              if [ $BITBUCKET_BUILD_NUMBER -lt 4 ]; then
                echo "First execution. The team will not be created"
                echo -n 0 > team_validation
                exit 0
              fi
            - |
              if [[ " master test dev " =~ " $BITBUCKET_BRANCH " ]]; then
                if [[ "master" ==  "$BITBUCKET_BRANCH" ]]; then ENV="prod"; else ENV="$BITBUCKET_BRANCH"; fi
                TEAM=$(jq -r '.[] | select(.ParameterKey=="pTeamName") | .ParameterValue' parameters-$ENV.json)
                TEST_REPO=$PREFIX-$TEAM-ljhdatalake-stageb
                apk add curl
                OUTPUT=$(curl -H "Content-Type: application/json" -u ${BBUSER}:${APP_PASS} https://api.bitbucket.org/2.0/repositories/$BITBUCKET_WORKSPACE/$TEST_REPO 2>&1 )
                if [[ "$OUTPUT" == *"not found"* ]]; then
                  echo "Team does not exist on Bitbucket"
                  echo -n 1 > team_validation
                else
                  echo "Team already exists on BitBucket"
                  echo -n 0 > team_validation
                fi
              else
                echo "Branch not supported"
                echo -n 0 > team_validation
              fi
          artifacts:
            - team_validation
    - step:
        name: Create repositories on AWS
        script:
          - if [ $(cat team_validation) -eq 0 ]; then echo "Repository not created"; exit 0; fi
          - if [ "master" ==  "$BITBUCKET_BRANCH" ]; then ENV="prod"; else ENV="$BITBUCKET_BRANCH"; fi
          - export AWS_ACCESS_KEY_ID=$LJHDATALAKE_AWS_ACCESS_KEY_ID
          - export AWS_SECRET_ACCESS_KEY=$LJHDATALAKE_AWS_SECRET_ACCESS_KEY
          - export AWS_SESSION_TOKEN=$LJHDATALAKE_AWS_SESSION_TOKEN
          - export AWS_DEFAULT_REGION=$LJHDATALAKE_AWS_REGION
          - |
            if [ ${#LJHDATALAKE_AWS_ROLE_TO_ASSUME_NAME} -gt 0 ]; then
              echo Assuming role: $LJHDATALAKE_AWS_ROLE_TO_ASSUME_NAME
              aws sts assume-role --role-arn $LJHDATALAKE_AWS_ROLE_TO_ASSUME_ARN  --role-session-name $LJHDATALAKE_AWS_ROLE_TO_ASSUME_NAME > tmp.json
              export AWS_ACCESS_KEY_ID=$(jq -r .Credentials.AccessKeyId tmp.json)
              export AWS_SECRET_ACCESS_KEY=$(jq -r .Credentials.SecretAccessKey tmp.json)
              export AWS_SESSION_TOKEN=$(jq -r .Credentials.SessionToken tmp.json)              
              rm tmp.json
            fi
          - TEAM=$(jq -r '.[] | select(.ParameterKey=="pTeamName") | .ParameterValue' parameters-$ENV.json)
          - declare -a REPOSITORIES=("ljhdatalake-pipeline" "ljhdatalake-dataset" "ljhdatalake-datalakeLibrary" "ljhdatalake-pipLibrary" "ljhdatalake-stageA" "ljhdatalake-stageB")
          - |
            for REPO in "${REPOSITORIES[@]}"; do
              TEAM_REPOSITORY=ljhdatalake-${TEAM}-$(cut -d'-' -f2 <<<${REPO})
              aws codecommit create-repository --repository-name $TEAM_REPOSITORY
            done
    - step:
        name: Create repositories on Bitbucket
        script:
          - if [ $(cat team_validation) -eq 0 ]; then echo "Repository not created"; exit 0; fi
          - if [ "master" ==  "$BITBUCKET_BRANCH" ]; then ENV="prod"; else ENV="$BITBUCKET_BRANCH"; fi
          - declare -a REPOSITORIES=("ljhdatalake-pipeline" "ljhdatalake-dataset" "ljhdatalake-datalakelibrary" "ljhdatalake-piplibrary" "ljhdatalake-stagea" "ljhdatalake-stageb")
          - TEAM=$(jq -r '.[] | select(.ParameterKey=="pTeamName") | .ParameterValue' parameters-$ENV.json)
          - apk add curl
          - |
            for REPO in "${REPOSITORIES[@]}"; do
              curl -X POST -H "Content-Type: application/json" -u $BBUSER:$APP_PASS  -d "{\"scm\": \"git\", \"is_private\": \"true\",\
              \"project\": {\"key\": \"$BITBUCKET_PROJECT_KEY\"} }" https://api.bitbucket.org/2.0/repositories/$BITBUCKET_WORKSPACE/$PREFIX-$TEAM-$REPO
              git clone --bare "https://$BBUSER:$APP_PASS@bitbucket.org/$BITBUCKET_WORKSPACE/$PREFIX-$REPO.git"
              cd $PREFIX-$REPO.git
              git push --mirror "https://$BBUSER:$APP_PASS@bitbucket.org/$BITBUCKET_WORKSPACE/$PREFIX-$TEAM-$REPO.git"
              cd ..
            done
          - ls -ltr
    - step:
        name: Create pipelines on Bitbucket
        script:
          - if [ $(cat team_validation) -eq 0 ]; then echo "Repository not created"; exit 0; fi
          - declare -a REPOSITORIES=("ljhdatalake-pipeline" "ljhdatalake-dataset" "ljhdatalake-datalakeLibrary" "ljhdatalake-pipLibrary" "ljhdatalake-stageA" "ljhdatalake-stageB")
          - if [ "master" ==  "$BITBUCKET_BRANCH" ]; then ENV="prod"; else ENV="$BITBUCKET_BRANCH"; fi
          - TEAM=$(jq -r '.[] | select(.ParameterKey=="pTeamName") | .ParameterValue' parameters-$ENV.json)
          - |
            for REPO in "${REPOSITORIES[@]}"; do
              REPO_BB=$(echo $REPO | awk '{print tolower($0)}' )
              REMOTE_REPO=ljhdatalake-${TEAM}-$(cut -d'-' -f2 <<<${REPO})
              apk add curl
              echo "Enabling pipelines"
              curl -X PUT -H "Content-Type: application/json" -u ${BBUSER}:${APP_PASS} -d '{ "enabled": "true" }' \
              https://api.bitbucket.org/2.0/repositories/$BITBUCKET_WORKSPACE/${PREFIX}-$TEAM-${REPO_BB}/pipelines_config
              echo "Creating pipeline variables"
              curl -X POST -H "Content-Type: application/json" -u ${BBUSER}:${APP_PASS} -d "{ \"type\": \"pipeline_variable\",\"key\": \"REMOTE_REPO\",\
              \"value\": \"$REMOTE_REPO\", \"secured\": \"false\" }" \
              https://api.bitbucket.org/2.0/repositories/$BITBUCKET_WORKSPACE/${PREFIX}-$TEAM-${REPO_BB}/pipelines_config/variables/
              echo "Running pipelines"
              for branch in master test dev ; do
                echo "Executing pipeline in branch $branch"
                curl -sS -X POST -H "Content-Type: application/json" -u ${BBUSER}:${APP_PASS} -d "{\"target\": { \"ref_type\": \"branch\",\
                \"type\": \"pipeline_ref_target\", \"ref_name\": \"$branch\" } }" \
                https://api.bitbucket.org/2.0/repositories/$BITBUCKET_WORKSPACE/$PREFIX-$TEAM-$REPO_BB/pipelines/
                echo "Waiting execution" && sleep 15
              done
            done