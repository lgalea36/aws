AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Data Quality And Glue Catalog Tables Schema Replication

Parameters:
  pApplicationName:
    Type: String
  pDataQualityBucket:
    Type: String
  pDataLakeAdminRoleArn:
    Type: String
  pEnvironment:
    Type: String
  pKMSKeyId:
    Type: String
  pOrganizationName:
    Type: String
  pPipelineBucket:
    Type: String
  pCloudWatchLogsRetentionInDays:
    Type: Number

Globals:
  Function:
    Runtime: python3.7
    Handler: lambda_function.lambda_handler
    KmsKeyArn: !Ref pKMSKeyId

Resources:
  ######## IAM #########
  # Common policy
  rCommonPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: ljhdatalake-data-quality-common
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ljhdatalake-*
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/LJHDATALAKE/*
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
          - Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !Ref pKMSKeyId

  # Step1 Role
  rRoleLambdaExecutionStep1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ljhdatalake-data-quality-initial-check
      ManagedPolicyArns:
        - !Ref rCommonPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /state-machine/
      Policies:
        - PolicyName: ljhdatalake-data-quality-initial-check
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - glue:GetJobRun
                  - glue:StartJobRun
                Resource: "*"

  # Step2 Role
  rRoleLambdaExecutionStep2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ljhdatalake-data-quality-crawl
      ManagedPolicyArns:
        - !Ref rCommonPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /state-machine/
      Policies:
        - PolicyName: ljhdatalake-data-quality-crawl
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                Resource: "*"

  rStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ljhdatalake-data-quality-states-execution
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ljhdatalake-data-quality-states-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt rLambdaStep1.Arn
                  - !GetAtt rLambdaJobCheckStep.Arn
                  - !GetAtt rLambdaStep2.Arn

  ######## LAMBDA #########
  rLambdaStep1:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/initial-check/src
      FunctionName: ljhdatalake-data-quality-initial-check
      Description: Performs checks and determines which Data Quality job to run
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn

  rLambdaStep1LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaStep1}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rLambdaJobCheckStep:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/check-job/src
      FunctionName: ljhdatalake-data-quality-check-job
      Description: Checks if job has finished (success/failure)
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn

  rLambdaJobCheckStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaJobCheckStep}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rLambdaStep2:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/crawl-data/src
      FunctionName: ljhdatalake-data-quality-crawl-data
      Description: Glue crawler
      MemorySize: 256
      Timeout: 120
      Role: !GetAtt rRoleLambdaExecutionStep2.Arn

  rLambdaStep2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaStep2}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rLambdaReplicate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ljhdatalake-glue-replication
      Description: Replicates Glue Catalog Metadata and Data Quality to Octagon Schemas Table
      CodeUri: ../lambda/replicate/src
      Environment:
        Variables:
          ENV: !Ref pEnvironment
      MemorySize: 128
      Timeout: 300
      Role: !Ref pDataLakeAdminRoleArn

  rLambdaReplicateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaReplicate}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rEventsInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: rLambdaReplicate
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rLambdaEventsRule.Arn

  ######## STEP FUNCTIONS #########
  rDataQualityStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: ljhdatalake-data-quality-sm
      DefinitionUri: ../state-machine/data-quality.asl.json
      DefinitionSubstitutions:
        lStep1: !GetAtt rLambdaStep1.Arn
        lStep2: !GetAtt rLambdaStep2.Arn
        lCheckJob: !GetAtt rLambdaJobCheckStep.Arn
      Role: !GetAtt rStatesExecutionRole.Arn

  ######## GLUE #########
  rGlueJobController:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: "pythonshell"
        PythonVersion: "3"
        ScriptLocation: !Sub "s3://${pPipelineBucket}/deequ/scripts/deequ-controller.py"
      DefaultArguments:
        "--TempDir": !Sub "s3://${pPipelineBucket}/deequ/"
        "--enable-metrics": "true"
        "--env": !Ref "pEnvironment"
        "--team": "default"
        "--dataset": "default"
        "--glueDatabase": "default"
        "--glueTables": "table1,table2"
        "--targetBucketName": !Sub "s3://${pDataQualityBucket}"
      ExecutionProperty:
        MaxConcurrentRuns: 10
      GlueVersion: "1.0"
      Timeout: 65
      Name: ljhdatalake-data-quality-controller
      Role: !Ref pDataLakeAdminRoleArn

  rSuggestionVerificationRunnerGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${pPipelineBucket}/deequ/scripts/deequ-suggestion-analysis-verification-runner.scala"
      DefaultArguments:
        "--TempDir": !Sub "s3://${pPipelineBucket}/deequ/"
        "--job-language": "scala"
        "--class": "GlueApp"
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-continuous-log-filter": "true"
        "--enable-metrics": "true"
        "--enable-glue-datacatalog": ""
        "--extra-jars": !Sub "s3://${pPipelineBucket}/deequ/jars/deequ-1.0.3-RC1.jar"
        "--dynamodbSuggestionTableName": !Sub octagon-DataQualitySuggestions-${pEnvironment}
        "--dynamodbAnalysisTableName": !Sub octagon-DataQualityAnalysis-${pEnvironment}
        "--team": "default"
        "--dataset": "default"
        "--glueDatabase": "default"
        "--glueTables": "table1,table2"
        "--targetBucketName": !Sub "s3://${pDataQualityBucket}"
      ExecutionProperty:
        MaxConcurrentRuns: 10
      GlueVersion: "2.0"
      MaxCapacity: 3
      MaxRetries: 0
      Timeout: 60
      Name: ljhdatalake-data-quality-suggestion-analysis-verification-runner
      Role: !Ref pDataLakeAdminRoleArn

  rVerificationRunnerGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${pPipelineBucket}/deequ/scripts/deequ-analysis-verification-runner.scala"
      DefaultArguments:
        "--TempDir": !Sub "s3://${pPipelineBucket}/deequ/"
        "--job-language": "scala"
        "--class": "GlueApp"
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-continuous-log-filter": "true"
        "--enable-metrics": "true"
        "--enable-glue-datacatalog": ""
        "--extra-jars": !Sub "s3://${pPipelineBucket}/deequ/jars/deequ-1.0.3-RC1.jar"
        "--dynamodbSuggestionTableName": !Sub octagon-DataQualitySuggestions-${pEnvironment}
        "--dynamodbAnalysisTableName": !Sub octagon-DataQualityAnalysis-${pEnvironment}
        "--team": "default"
        "--dataset": "default"
        "--glueDatabase": "default"
        "--glueTables": "table1,table2"
        "--targetBucketName": !Sub "s3://${pDataQualityBucket}"
      ExecutionProperty:
        MaxConcurrentRuns: 10
      MaxRetries: 0
      Timeout: 60
      GlueVersion: "2.0"
      MaxCapacity: 3
      Name: ljhdatalake-data-quality-analysis-verification-runner
      Role: !Ref pDataLakeAdminRoleArn

  rProfilerRunnerGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${pPipelineBucket}/deequ/scripts/deequ-profile-runner.scala"
      DefaultArguments:
        "--TempDir": !Sub "s3://${pPipelineBucket}/deequ/"
        "--job-language": "scala"
        "--class": "GlueApp"
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-continuous-log-filter": "true"
        "--enable-metrics": "true"
        "--enable-glue-datacatalog": ""
        "--extra-jars": !Sub "s3://${pPipelineBucket}/deequ/jars/deequ-1.0.3-RC1.jar"
        "--team": "default"
        "--dataset": "default"
        "--glueDatabase": "default"
        "--glueTables": "table1,table2"
        "--targetBucketName": !Sub "s3://${pDataQualityBucket}"
      ExecutionProperty:
        MaxConcurrentRuns: 10
      MaxRetries: 0
      Timeout: 60
      GlueVersion: "2.0"
      MaxCapacity: 3
      Name: ljhdatalake-data-quality-profile-runner
      Role: !Ref pDataLakeAdminRoleArn

  rGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: data quality metadata catalog
        Name: !Sub "${pOrganizationName}_${pApplicationName}_${pEnvironment}_data_quality_db"

  rGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !Ref pDataLakeAdminRoleArn
      DatabaseName: !Ref rGlueDataCatalog
      Name: ljhdatalake-data-quality-crawler
      Targets:
        S3Targets:
          - Path: !Sub "s3://${pDataQualityBucket}"

  rGlueCrawlerLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !Ref pDataLakeAdminRoleArn
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rGlueDataCatalog

  ######## EVENTS #########
  rLambdaEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers Glue replicate Lambda upon change to metadata catalog
      State: ENABLED
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - Glue Data Catalog Database State Change
          - Glue Data Catalog Table State Change
      Targets:
        - Arn: !GetAtt rLambdaReplicate.Arn
          Id: LambdaReplicate

  ######## SSM #########
  rDataQualityStateMachineSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/SM/DataQualityStateMachine
      Type: String
      Value: !Ref rDataQualityStateMachine
      Description: Data Quality State Machine

Outputs:
  oLambdaStep1:
    Value: !Ref rLambdaStep1
    Description: Performs checks and determines which Data Quality job to run
  oLambdaJobCheckStep:
    Value: !Ref rLambdaJobCheckStep
    Description: Checks if job has finished (success/failure)
  oLambdaStep2:
    Value: !Ref rLambdaStep2
    Description: Glue Crawler
  oLambdaReplicate:
    Value: !Ref rLambdaReplicate
    Description: Replicates Glue Catalog Metadata and Data Quality to Octagon Schemas Table
