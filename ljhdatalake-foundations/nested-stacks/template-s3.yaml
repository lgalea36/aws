AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: S3 and associated Lambda/SQS Resources to be created by the foundations stack

Parameters:
  pApplicationName:
    Type: String
  pCustomBucketPrefix:
    Type: String
  pEnvironment:
    Type: String
  pKMSKeyId:
    Type: String
  pNumBuckets:
    Type: String
  pOrganizationName:
    Type: String
  pCloudWatchLogsRetentionInDays:
    Type: Number

Conditions:
  CreateMultipleBuckets: !Equals [!Ref pNumBuckets, "3"]
  CreateSingleBucket: !Equals [!Ref pNumBuckets, "1"]
  UseCustomBucketPrefix: !Not [!Equals [!Ref pCustomBucketPrefix, ljhdatalake]]

Globals:
  Function:
    Runtime: python3.7
    Handler: lambda_function.lambda_handler
    KmsKeyArn: !Ref pKMSKeyId

Resources:
  ####### S3 Buckets #########
  rPipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-artifactory",
          !Sub "${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-artifactory",
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rPipelineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rPipelineBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${rPipelineBucket}/*
              - !Sub arn:aws:s3:::${rPipelineBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  # To Enforce KMS encryption: https://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-store-kms-encrypted-objects/
  rCentralBucket:
    Type: AWS::S3::Bucket
    Condition: CreateSingleBucket
    DependsOn: rQueueCatalogPolicy
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Ref pCustomBucketPrefix,
          !Sub "${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}",
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt rQueueCatalog.Arn
          - Event: s3:ObjectRemoved:*
            Queue: !GetAtt rQueueCatalog.Arn

  rCentralBucketPolicy:
    Condition: CreateSingleBucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rCentralBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${rCentralBucket}/*
              - !Sub arn:aws:s3:::${rCentralBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rCentralBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    Condition: CreateSingleBucket
    Properties:
      ResourceArn: !Sub arn:aws:::s3:${rCentralBucket}/
      UseServiceLinkedRole: True

  rRawBucket:
    Type: AWS::S3::Bucket
    Condition: CreateMultipleBuckets
    DependsOn: rQueueCatalogPolicy
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-raw",
          !Sub "${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-raw",
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt rQueueCatalog.Arn
          - Event: s3:ObjectRemoved:*
            Queue: !GetAtt rQueueCatalog.Arn

  rRawBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateMultipleBuckets
    Properties:
      Bucket: !Ref rRawBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${rRawBucket}/*
              - !Sub arn:aws:s3:::${rRawBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rRawBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    Condition: CreateMultipleBuckets
    Properties:
      ResourceArn: !Sub arn:aws:::s3:${rRawBucket}/
      UseServiceLinkedRole: True

  rStageBucket:
    Type: AWS::S3::Bucket
    Condition: CreateMultipleBuckets
    DependsOn: rQueueCatalogPolicy
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-stage",
          !Sub "${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-stage",
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt rQueueCatalog.Arn
          - Event: s3:ObjectRemoved:*
            Queue: !GetAtt rQueueCatalog.Arn

  rStageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateMultipleBuckets
    Properties:
      Bucket: !Ref rStageBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${rStageBucket}/*
              - !Sub arn:aws:s3:::${rStageBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rStageBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    Condition: CreateMultipleBuckets
    Properties:
      ResourceArn: !Sub arn:aws:::s3:${rStageBucket}/
      UseServiceLinkedRole: True

  rAnalyticsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateMultipleBuckets
    DependsOn: rQueueCatalogPolicy
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-analytics",
          !Sub "${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-analytics",
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt rQueueCatalog.Arn
          - Event: s3:ObjectRemoved:*
            Queue: !GetAtt rQueueCatalog.Arn

  rAnalyticsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateMultipleBuckets
    Properties:
      Bucket: !Ref rAnalyticsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${rAnalyticsBucket}/*
              - !Sub arn:aws:s3:::${rAnalyticsBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rAnalyticsBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    Condition: CreateMultipleBuckets
    Properties:
      ResourceArn: !Sub arn:aws:::s3:${rAnalyticsBucket}/
      UseServiceLinkedRole: True

  rDataQualityBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-dataquality",
          !Sub "${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-dataquality",
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rDataQualityBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rDataQualityBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${rDataQualityBucket}/*
              - !Sub arn:aws:s3:::${rDataQualityBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rDataQualityBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    Properties:
      ResourceArn: !Sub arn:aws:::s3:${rDataQualityBucket}/
      UseServiceLinkedRole: True

  rAthenaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-athena",
          !Sub "${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-athena",
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rAthenaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rAthenaBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:aws:s3:::${rAthenaBucket}/*
              - !Sub arn:aws:s3:::${rAthenaBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  ######## Lambda & SQS #########
  rQueueCatalog:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ljhdatalake-catalog-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt rDeadLetterQueueCatalog.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 60
      KmsMasterKeyId: !Ref pKMSKeyId

  rDeadLetterQueueCatalog:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ljhdatalake-catalog-dlq
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      KmsMasterKeyId: !Ref pKMSKeyId

  rQueueRouting:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ljhdatalake-routing-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt rDeadLetterQueueRouting.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 60
      KmsMasterKeyId: !Ref pKMSKeyId

  rDeadLetterQueueRouting:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ljhdatalake-routing-dlq
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      KmsMasterKeyId: !Ref pKMSKeyId

  rQueueLambdaCatalogEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !GetAtt rQueueCatalog.Arn
      FunctionName: !GetAtt rLambdaCatalog.Arn

  rQueueLambdaRoutingEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !GetAtt rQueueRouting.Arn
      FunctionName: !GetAtt rLambdaRouting.Arn

  rLambdaCatalog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/catalog/src
      FunctionName: ljhdatalake-catalog
      Environment:
        Variables:
          ENV: !Ref pEnvironment
          NUM_BUCKETS: !Ref pNumBuckets
          ROUTING_QUEUE: !GetAtt rQueueRouting.QueueName
      Description: Catalogs S3 Put and Delete to ObjectMetaDataCatalog
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecution.Arn

  rLambdaRouting:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/routing/src
      FunctionName: ljhdatalake-routing
      Environment:
        Variables:
          ACCOUNT_ID: !Ref "AWS::AccountId"
          ORG: !Ref pOrganizationName
          APP: !Ref pApplicationName
          ENV: !Ref pEnvironment
          NUM_BUCKETS: !Ref pNumBuckets
      Description: Routes S3 PutObject Logs to the relevant StageA Queue
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecution.Arn

  rLambdaRoutingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaRouting}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rLambdaCatalogRedrive:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/catalog-redrive/src
      FunctionName: ljhdatalake-catalog-redrive
      Environment:
        Variables:
          QUEUE: !GetAtt rQueueCatalog.QueueName
          DLQ: !GetAtt rDeadLetterQueueCatalog.QueueName
      Description: Redrives Failed S3 Put/Delete to Catalog Lambda
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecution.Arn

  rLambdaCatalogRedriveLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaCatalogRedrive}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rLambdaRoutingRedrive:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/routing-redrive/src
      FunctionName: ljhdatalake-routing-redrive
      Environment:
        Variables:
          QUEUE: !GetAtt rQueueRouting.QueueName
          DLQ: !GetAtt rDeadLetterQueueRouting.QueueName
      Description: Redrives Failed S3 PutObject Logs to the routing queue
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecution.Arn
  rLambdaRoutingRedriveLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaRoutingRedrive}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rQueueCatalogPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - SQS:SendMessage
            Resource: !GetAtt rQueueCatalog.Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  !If [
                    UseCustomBucketPrefix,
                    !If [
                      CreateMultipleBuckets,
                      [
                        !Sub "arn:aws:s3:::${pCustomBucketPrefix}-raw",
                        !Sub "arn:aws:s3:::${pCustomBucketPrefix}-stage",
                        !Sub "arn:aws:s3:::${pCustomBucketPrefix}-analytics",
                      ],
                      !Sub "arn:aws:s3:::${pCustomBucketPrefix}",
                    ],
                    !If [
                      CreateMultipleBuckets,
                      [
                        !Sub "arn:aws:s3:::${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-raw",
                        !Sub "arn:aws:s3:::${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-stage",
                        !Sub "arn:aws:s3:::${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-analytics",
                      ],
                      !Sub "arn:aws:s3:::${pOrganizationName}-${pApplicationName}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}",
                    ],
                  ]
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Queues:
        - !Ref rQueueCatalog

  rQueueRoutingPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt rRoleLambdaExecution.Arn
            Action:
              - SQS:SendMessage
            Resource: !GetAtt rQueueRouting.Arn
      Queues:
        - !Ref rQueueRouting

  rRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ljhdatalake-routing
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ljhdatalake-routing
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ljhdatalake-*
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:DeleteMessageBatch
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ListQueues
                  - sqs:ListDeadLetterSourceQueues
                  - sqs:ListQueueTags
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:SendMessageBatch
                Resource:
                  - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:ljhdatalake-*
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:GetRecords
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource: !Ref pKMSKeyId

  ####### SSM #######
  rS3ArtifactBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/S3/ArtifactsBucket
      Type: String
      Value: !Ref rPipelineBucket
      Description: Name of the Artifacts S3 bucket
  rS3CentralBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/S3/CentralBucket
      Type: String
      Value: !If [CreateMultipleBuckets, !Ref rRawBucket, !Ref rCentralBucket]
      Description: Name of the Central S3 bucket
  rS3StageBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/S3/StageBucket
      Type: String
      Value: !If [CreateMultipleBuckets, !Ref rStageBucket, !Ref rCentralBucket]
      Description: Name of the Stage S3 bucket
  rS3AnalyticsBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/S3/AnalyticsBucket
      Type: String
      Value:
        !If [CreateMultipleBuckets, !Ref rAnalyticsBucket, !Ref rCentralBucket]
      Description: Name of the Analytics S3 bucket
  rS3DataQualityBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/S3/DataQualityBucket
      Type: String
      Value: !Ref rDataQualityBucket
      Description: Name of the Data Quality S3 bucket
  rS3AthenaBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/S3/AthenaBucket
      Type: String
      Value: !Ref rAthenaBucket
      Description: Name of the Athena results S3 bucket
  rQueueRoutingSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/SQS/QueueRouting
      Type: String
      Value: !Ref rQueueRouting
      Description: URL of routing queue
  rDeadLetterQueueRoutingSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /LJHDATALAKE/SQS/DeadLetterQueueRouting
      Type: String
      Value: !Ref rDeadLetterQueueRouting
      Description: URL of dead letter routing queue

Outputs:
  oLambdaCatalog:
    Value: !Ref rLambdaCatalog
    Description: Catalogs S3 Put/DeleteObject into ObjectMetadataCatalog DynamoDB table
  oLambdaRouting:
    Value: !Ref rLambdaRouting
    Description: Routes S3 PutObject Logs to the relevant StageA Queue
  oLambdaCatalogRedrive:
    Value: !Ref rLambdaCatalogRedrive
    Description: Redrives Failed S3 Put/DeleteObject Logs to the catalog queue
  oLambdaRoutingRedrive:
    Value: !Ref rLambdaRoutingRedrive
    Description: Redrives Failed S3 PutObject Logs to the routing queue
  oPipelineBucket:
    Value: !Ref rPipelineBucket
    Description: Data Lake Artifactory Bucket
  oCentralBucket:
    Value: !If [CreateMultipleBuckets, !Ref rRawBucket, !Ref rCentralBucket]
    Description: Data Lake Ingestion Bucket
  oStageBucket:
    Value: !Ref rStageBucket
    Condition: CreateMultipleBuckets
    Description: Data Lake Stage Bucket
  oAnalyticsBucket:
    Value: !Ref rAnalyticsBucket
    Condition: CreateMultipleBuckets
    Description: Data Lake Analytics Bucket
  oDataQualityBucket:
    Value: !Ref rDataQualityBucket
    Description: Data Quality Bucket
